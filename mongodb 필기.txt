1. mongodb를 이용한 분산 / 복제

(1) Master Slave 방식

	- 노드 3개 준비
		Master : port 10000
		Slave1 : port 10001
		Slave2 : port 10002

	- 3대의 서버 실행
		mongod --dbpath C:\mongowork\master --port 10000 --master
		mongod --dbpath C:\mongowork\slave1 --port 10001 --slave --source localhost:10000
		mongod --dbpath C:\mongowork\slave2 --port 10002 --slave --source localhost:10000

	- 3대의 클라이언트 준비
		mongo localhost:10000
		mongo localhost:10001
		mongo localhost:10002

	- master에서 작업
		show collections
		db.test.insert({a:1})
		db.test.find()

	- 각 slave에서 작업
		show collections

		db.setSlaveOk()
		show collections
		db.test.find()		
		db.test.insert({b:2})	

	- 첫번째 slave에 결함 생성
		slave1의 서버 중지
		slave의 db 삭제 (탐색기의 slave1 폴더 안 내용 다 삭제)

		slave 1 다시 가동
		mongod --dbpath C:\mongowork\slave1 --port 10001 --slave --source localhost:10000

		클라이언트 재접속
		mongo localhost:1001

(2) ReplicaSet
	
	- 4개의 서버 가동
		mongod --dbpath C:\mongowork\db1 --port 10001 --replSet rptmongo --oplogSize 10
		mongod --dbpath C:\mongowork\db2 --port 10002 --replSet rptmongo --oplogSize 10
		mongod --dbpath C:\mongowork\db3 --port 10003 --replSet rptmongo --oplogSize 10
		mongod --dbpath C:\mongowork\arbit --port 10004 --replSet rptmongo --oplogSize 10

	- primary로 지정한 client 접속(DB1을 지정할 것)
		mongo localhost:10001
		use admin

		db.runCommand(
			{"replSetInitiate" : {"_id" : "rptmongo", "members" : [ 
			{"_id" : 1, "host" : "localhost:10001"},
			{"_id" : 2, "host" : "localhost:10002"},
			{"_id" : 3, "host" : "localhost:10003"},
			{"_id" : 4, "host" : "localhost:10004", arbiterOnly : true}
			] }}
		)

	-primary에서 입력 테스트
		use test 
		db.test.insert({a:1})
		db.test.find()

	-secondary에서 테스트
		use test 
		db.setSlaveOk()
		db.test.find()
		db.test.insert({b:2})
		db.test.find()

	-arbiter에서 테스트
		use test 
		db.setSlaveOk()
		db.test.find()

	- primary 서버 장애
		primary 서버 중지
		primary db 삭제


2. mongodb를 이용한 분산

(1) config 서버 : ReplicaSet으로 구현 (3대)
	C:\mongowork\shared\config1
	C:\mongowork\shared\config2
	C:\mongowork\shared\config3

	mongod --configsvr --replSet configRepl --dbpath C:\mongowork\shared\config1 --port 20001
	mongod --configsvr --replSet configRepl --dbpath C:\mongowork\shared\config2 --port 20002
	mongod --configsvr --replSet configRepl --dbpath C:\mongowork\shared\config3 --port 20003

	-primary 설정
		20001 포트의 서버로 접속

		var config = {"_id" : "configRepl" , "members":[
				{"_id" : 1, "host" : "localhost:20001"},
				{"_id" : 2, "host" : "localhost:20002"},
				{"_id" : 3, "host" : "localhost:20003"} ]}

		rs.initiate(config)

(2) shard 서버

	C:\mongowork\shared\shard1\shardRep1
	C:\mongowork\shared\shard1\shardRep2
	C:\mongowork\shared\shard1\shardRep3

	C:\mongowork\shared\shard2\shardRep1
	C:\mongowork\shared\shard2\shardRep2
	C:\mongowork\shared\shard2\shardRep3

	C:\mongowork\shared\shard3\shardRep1
	C:\mongowork\shared\shard3\shardRep2
	C:\mongowork\shared\shard3\shardRep3

	mongod --shardsvr --replSet shardRep1 --dbpath C:\mongowork\shared\shard1\shardRep1 --port 30011
	mongod --shardsvr --replSet shardRep1 --dbpath C:\mongowork\shared\shard1\shardRep2 --port 30012
	mongod --shardsvr --replSet shardRep1 --dbpath C:\mongowork\shared\shard1\shardRep3 --port 30013

	mongod --shardsvr --replSet shardRep2 --dbpath C:\mongowork\shared\shard2\shardRep1 --port 30021
	mongod --shardsvr --replSet shardRep2 --dbpath C:\mongowork\shared\shard2\shardRep2 --port 30022
	mongod --shardsvr --replSet shardRep2 --dbpath C:\mongowork\shared\shard2\shardRep3 --port 30023

	mongod --shardsvr --replSet shardRep3 --dbpath C:\mongowork\shared\shard3\shardRep1 --port 30031
	mongod --shardsvr --replSet shardRep3 --dbpath C:\mongowork\shared\shard3\shardRep2 --port 30032
	mongod --shardsvr --replSet shardRep3 --dbpath C:\mongowork\shared\shard3\shardRep3 --port 30033

	-primary 설정
		mongo localhost:30011
		---------------------------
		var config = {"_id" : "shardRep1" , "members":[{"_id" : 1, "host" : "localhost:30011"},
			{"_id" : 2, "host" : "localhost:30012"},
			{"_id" : 3, "host" : "localhost:30013"} ]}

		rs.initiate(config)


		mongo localhost:30021
		---------------------------
		var config = {"_id" : "shardRep2" , "members":[{"_id" : 1, "host" : "localhost:30021"},
			{"_id" : 2, "host" : "localhost:30022"},
			{"_id" : 3, "host" : "localhost:30023"} ]}

		rs.initiate(config)


		mongo localhost:30031
		---------------------------
		var config = {"_id" : "shardRep3" , "members":[{"_id" : 1, "host" : "localhost:30031"},
			{"_id" : 2, "host" : "localhost:30032"},
			{"_id" : 3, "host" : "localhost:30033"} ]}

		rs.initiate(config)

(3) Route 서버
	- config 서버 등록
		mongos --configdb configRepl/localhost:20001,localhost:20002,localhost:20003

	- Route 서버에 접속
		mongo localhost:27017

	- shard서버 등록
		sh.addShard("shardRep1/localhost:30011")
		sh.addShard("shardRep2/localhost:30021")
		sh.addShard("shardRep3/localhost:30031")

	- DB 생성
		sh.enableSharding("test")

	- 인덱스 생성
		db.thing.createIndex({empno:1})

		use admin
		sh.shardCollection("test.thing", {empno:"hashed"})

	- Testing
		use test
		for(var n=100000; n<110000; n++){
			db.thing.insert({empno:n, ename:"test", sal:1000})
		}

		db.thing.count()

	- 각 shard서버에 접속해서 갯수 확인
		mongo localhost:30011
		use test
		db.thing.count()

		mongo localhost:30021
		use test
		db.thing.count()

		mongo localhost:30031
		use test
		db.thing.count()

2. HADOOP 실습
		*.hadoop 설치
		- hadoop 환경 설정
				gedit /etc/profile
				<텍스트 편집기 뜨면 맨 아래에 내용 추가>
				export HADOOP_HOME=/root/hadoop2
				export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin

				export HDFS_NAMENODE_USER="root"
				export HDFS_DATANODE_USER="root"
				export HDFS_SECONDARYNAMENODE_USER="root"
				export YARN_RESOURCEMANAGER_USER="root"
				export YARN_NODEMANAGER_USER="root"

				저장 후 재부팅
				hadoop version
				
		1. 독립모드
				터미널창에서 아래의 명령어를 실행(한줄로 이어서 실행)
				hadoop jar
				$HADOOP_HOME/share/hadoop/mapreduce/hadoop-mapreduce-examples=2.10.0.jar wordcount $HADOOP_HOME/etc/hadoop/hadoop-env.sh wordcount_output
				
				hadoop을 실행한 위치에 wordcount_output폴더가 생성됨
				그 폴더 내부에 part-.... 을 gedit으로 읽어보자.
				
		2. 의사 분산 모드
				(1) 인증키 작성(비밀키와 공개키 생성)
						- 현재 위치가 home 디렉토리(root)인지 확인
						- ls -al 로 숨겨진 폴더나 파일까지 확인
								.ssh 폴더 확인하고 cd .ssh 로 이동
						- ssh-keygen -t rsa
						- 공개키를 상대 서버(slave)에 전송
								 cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys
						- 다시 접속 테스트
								ssh localhost
				(2) hadoop 세팅
						- gedit $HADOOP_HOME/etc/hadoop/hadoop-env.sh
								export JAVA_HOME=/usr/local/jdk11
								
						- gedit $HADOOP_HOME/etc/hadoop/core-site.xml
								<configuration>
										<property>
												<name>fs.defaultFS</name>
												<value>hdfs://localhost:9000</value>
										<property>
								</configuration>
								
						- gedit $HADOOP_HOME/etc/hadoop/hdfs-site/xml
								<configuration>
										<property>
												<name>dfs.replication</name>
												<value>1</value>
										<property>
								</configuration>
				
				(3) 네임노드 포맷
						hdfs namenode -format
						
				(4) 하둡 클러스터 시작(하둡 분산 파일 시스템 시작)
						start-dfs.sh
				
				(5) jps로 프로세스 확인
						Jps
						NameNode
						DataNode
						SecondaryNameNode
						
				(6) 프로세스가 제대로 실행이 안될 경우
						stop-dfs.sh
						hdfs namenode -format
						start-dfs.sh
						jps
				
				(7) stop-dfs.sh

